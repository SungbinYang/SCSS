// 중첩기능
.container {
    >ul {
        li {
            font-size: 40px;
            .name {
                color: royalblue;
            }
            .age {
                color: orange;
            }
        }
    }
}

// & - 상위 선택자 참조
.btn {
    position: absolute;
    &.active {
        color: red;
    }
}

.list {
    li {
        &:last-child {
            margin-right: 0;
        }
    }
}

.fs {
    &-small {
        font-size: 12px;
    }
    &-medium {
        font-size: 14px;
    }
    &-large {
        font-size: 16px;
    }
}

// 중첩된 속성
.box {
    font: {
        weight: bold;
        size: 10px;
        family: sans-serif;
    }
    ;
    margin: {
        top: 10px;
        left: 20px;
    }
    ;
    padding: {
        top: 10px;
        bottom: 40px;
        left: 20px;
        right: 30px;
    }
    ;
}

// 변수(Variables)
$size: 200px; // 전역변수 (전체 영역에서 시용 가능)
.container {
    $size: 100px;
    position: fixed;
    top: $size;
    .item {
        $size: 50px;
        width: $size;
        height: $size;
        transform: translateX($size);
    }
    left: $size; // 범위는 .container 안이여서 100px일것 같지만 .item에서는 값이 이미 다시 재할당 되었기 때문에 50px이 나온다.
}

.box {
    width: $size;
}

// 산술 연산
// 산술연산을 할때에는 기본적인 단위가 동일해야한다. 단, calc()함수를 사용하면 가능하게 한다.
div {
    width: 20px + 20px;
    height: 40px - 10px;
    font-size: 10px * 2;
    margin: (30px / 2); // 나누기 연산은 제대로 컴파일이 안됨 왜냐하면 /는 단축속성을 나타낼때 /가 키워드이기 때문이다. ()로 묶어서 하거나 변수틑 통헤 나눠야한다.
    padding: 20px % 7;
}

span {
    $size: 20px;
    font-size: $size / 2; // 변수를 통해 나누기 연산을 한다.
    line-height: 10px + 12px / 2; // 다른 산술연산을 혼합하여 사용한다.
    font-family: serif;
    font: 10px / 10px serif; // 앞에는 font-size, 뒤에는 line-height
}

.boxs {
    background-color: royalblue;
    width: calc(100% -200px);
    height: 100px;
}

// .containeres {
//     width: 200px;
//     height: 200px;
//     background-color: orange;
//     display: flex;
//     justify-content: center;
//     align-items: center;
//     .items {
//         display: flex;
//         justify-content: center;
//         align-items: center;
//         width: 100px;
//         height: 100px;
//         background-color: royalblue;
//     }
// }
// 재활용
@mixin center {
    // 재활용으로 사용한 코드, css의 속성과 값의 집합
    display: flex;
    justify-content: center;
    align-items: center;
}

.containeres {
    @include center; // 재활용 코드를 포함한다.
    .items {
        @include center;
    }
}

// 함수 추가
@function ratio($size, $ratio) {
    // 함수처럼 반환결과 값을 적용
    @return $size * $ratio;
}

.toolbox {
    $width: 160px;
    width: $width;
    height: ratio($width, 9/16);
    @include center;
}

// 인수를 담을수도 있다.
@mixin box($size: 80px, $color: tomato) {
    width: $size;
    height: $size;
    background-color: $color;
}

.container1 {
    @include box(200px, red);
    .item {
        @include box($color: green); // 원래는 인수가 쓰여진 순서데로 작성해야하지만 키워드 안수를 사용하여 선택적 인수의 값을 조절할수 있다.
    }
}

.box1 {
    @include box;
}

// 반복문
@for $i from 1 through 10 {
    .mybox:nth-child(#{$i}) {
        // 값을 적는 부분이 아니여서 보간처리
        width: 100px * $i; // 값을 적는 부분이여서 직접 작성
    }
}

// 색상 내장함수
.colorbox {
    $color: royalblue;
    width: 200px;
    height: 100px;
    margin: 20px;
    border-radius: 10px;
    background-color: $color;
    &:hover {
        background-color: darken($color, 10%);
    }
    &.built-in {
        // background-color: mix($color, red);
        // background-color: lighten($color, 10%);
        // background-color: darken($color, 10%);
        // background-color: saturate($color, 40%);
        // background-color: desaturate($color, 40%);
        // background-color: grayscale($color);
        // background-color: invert($color);
        background-color: rgba($color, .5);
    }
}

@import "./sub",
"./sub2";
$color: royalblue;
.myContainers {
    h1 {
        color: $color;
    }
}

// scss의 데이터 종류
$number: 1; // .5, 100px, 1em
$string: bold; // relative, "../images/a.png"
$color: red; // blue, #FFFF00, rgba(0, 0, 0, .1) // 색상 데이터도 가지고 있다.
$boolean: true; // false
$null: null;
$list: orange,
royalblue,
yellow; // js의 배열과 유사
$map: ( o: orange, r: royalblue, y: yellow); // js의 객체 데이터와 비슷 (key : value)
.box {
    width: 100px; // 숫자 데이터
    color: red; // 숫자 데이터
    position: relative; // 문자열 데이터
}